(define bind
    (lambda (v f)
        (if (is-error? v)
            v
            (f v)
        )
    )
)

(define make-error
    (lambda ()
        'error
    )
)

(define is-error?
    (lambda (x)
        (eq? x 'error)
    )
)

(define member?
    (lambda (x xs)
        (if (null? xs)
            #f
            (if (eq? x (car xs))
                #t
                (member? x (cdr xs))
            )
        )
    )
)

(define collect-keys
    (lambda (d)
        (if (null? d)
            '()
            (cons (car (car d)) (collect-keys (cdr d)))
        )
    )
)

(define no-duplicates?
    (lambda (keys)
        (if (null? keys)
            #t
            (if (member? (car keys) (cdr keys))
                #f
                (no-duplicates? (cdr keys))
            )
        )
    )
)

(define dict
    (lambda (p)
        (if (pair? p)
            p
            (make-error)
        )
    )
)

(define dict?
    (lambda (d)
        (if (eq? d '())
            #t
            (if (pair? d)
                (if (pair? (car d))
                    (if (symbol? (car (car d)))
                        (if (no-duplicates? (collect-keys d))
                            (dict? (cdr d))
                            #f
                        )
                        #f
                    )
                    #f
                )
                #f
            )
        )
    )
)

(define get
    (lambda (d key)
        (if (dict? d)
            (if (eq? (car (car d)) key)
                (cdr (car d))
                (if (eq? (cdr d) '())
                    (make-error)
                    (get (cdr d) key)
                )
            )
            (make-error)
        )
    )
)
