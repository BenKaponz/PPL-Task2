#lang racket
(require rackunit)
(require rackunit/text-ui)

(define tests
    (test-suite "Assignment 1 - Part 4"
    
        (test-suite "last-item"
            (check-equal? (last-item '(1 2 3)) 3)
            (check-equal? (last-item '(a b c)) 'c)
            ; Your tests here (optinal)
            ;
            ;

            ; last element of a numeric list
            (check-equal? (last-item '(1 2 3)) 3)

            ; last element of a list of symbols
            (check-equal? (last-item '(a b c)) 'c)

            ; single-element list
            (check-equal? (last-item '(42)) 42)

            ; last element is an inner list
            (check-equal? (last-item '((1 2) (3 4) (5 6))) '(5 6))

            ; last element is an empty list
            (check-equal? (last-item '(1 2 '())) ''())
        )

        (test-suite "remove-last-item"
            (check-equal? (remove-last-item '(1 2 3)) '(1 2))
            (check-equal? (remove-last-item '(a b c d)) '(a b c))
            ; Your tests here (optinal)
            ;
            ;

            ; remove last from numeric list
            (check-equal? (remove-last-item '(1 2 3)) '(1 2))

            ; remove last from list of symbols
            (check-equal? (remove-last-item '(a b c d)) '(a b c))

            ; remove last from list with a single element
            (check-equal? (remove-last-item '(z)) '())

            ; remove last from list of strings
            (check-equal? (remove-last-item '("a" "b" "c")) '("a" "b"))

            ; remove last from list with duplicates
            (check-equal? (remove-last-item '(1 2 3 3)) '(1 2 3))

            ; remove last from list with inner expression
            (check-equal? (remove-last-item '(1 (2 3) 4)) '(1 (2 3)))

            ; remove last from list with repeated symbols
            (check-equal? (remove-last-item '(a b a b a)) '(a b a b))
        )

        (test-suite "rotate-nth"
            (check-equal? (rotate-nth '(1 2 3) 1) '(3 1 2))
            (check-equal? (rotate-nth '(a b c d) 2) '(c d a b))
            ; Your tests here (optinal)
            ;
            ;

            ; rotate once
            (check-equal? (rotate-nth '(1 2 3) 1) '(3 1 2))

            ; rotate twice
            (check-equal? (rotate-nth '(a b c d) 2) '(c d a b))

            ; rotate with negative numbers
            (check-equal? (rotate-nth '(-1 -2 -3 -4) 2) '(-3 -4 -1 -2))

            ; rotate more than list length
            (check-equal? (rotate-nth '(x y z) 5) '(y z x))

            ; rotate single-element list
            (check-equal? (rotate-nth '(5) 10) '(5))
        )
    )
)

(run-tests tests)
